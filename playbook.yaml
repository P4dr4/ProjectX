---
- name: Docker Container Deployment
  hosts: raspberry
  become: true
  become_method: sudo
  
  vars:
    backend_image: "{{ lookup('env', 'BACKEND_IMAGE') }}"
    frontend_image: "{{ lookup('env', 'FRONTEND_IMAGE') }}"
    backend_port: "{{ lookup('env', 'BACKEND_PORT') }}"
    frontend_port: "{{ lookup('env', 'FRONTEND_PORT') }}"
    raspberry_ip: "{{ ansible_host }}"
    nginx_conf: |
      user nginx;
      worker_processes auto;
      error_log /var/log/nginx/error.log warn;
      pid /var/run/nginx.pid;

      events {
          worker_connections 1024;
      }

      http {
          include /etc/nginx/mime.types;
          default_type application/octet-stream;
          
          # Rate limiting zone definition (moved to http context)
          limit_req_zone $binary_remote_addr zone=mylimit:10m rate=10r/s;
          
          server {
              listen 80;
              listen [::]:80;
              server_name _;
              root /usr/share/nginx/html;
              index index.html;
              
              location / {
                  try_files $uri $uri/ /index.html;
                  limit_req zone=mylimit burst=20 nodelay;
              }
          }
      }

  tasks:
    - name: Install Docker requirements
      apt:
        name:
          - docker.io
          - python3-docker
        state: present
        update_cache: yes

    - name: Ensure Docker service is running
      service:
        name: docker
        state: started
        enabled: yes

    - name: Create Docker network
      docker_network:
        name: production_network
        state: present

    - name: Pull backend image
      docker_image:
        name: "{{ backend_image }}"
        source: pull
        force_source: yes

    - name: Pull frontend image
      docker_image:
        name: "{{ frontend_image }}"
        source: pull
        force_source: yes

    - name: Create nginx config directory
      file:
        path: /etc/docker/nginx
        state: directory
        mode: '0755'

    - name: Create nginx.conf
      copy:
        content: "{{ nginx_conf }}"
        dest: /etc/docker/nginx/nginx.conf
        mode: '0644'

    - name: Deploy backend container on local server Ubuntu
      docker_container:
        name: projectxb
        image: "{{ backend_image }}"
        state: started
        restart_policy: always
        ports:
          - "0.0.0.0:3000:3000"  # Changed to bind to all interfaces
          - "[::]:3000:3000"      # Keep IPv6 binding
        networks:
          - name: production_network
        network_mode: "bridge"    # Explicitly set bridge mode
        env:
          NODE_ENV: "production"
        log_driver: json-file
        log_options:
          max-size: 10m
          max-file: "3"

    - name: Deploy frontend container on local server Ubuntu
      docker_container:
        name: projectxf
        image: "{{ frontend_image }}"
        state: started
        restart_policy: always
        ports:
          - "0.0.0.0:4200:80"  # Changed to bind to all interfaces
          - "[::]:4200:80"      # Keep IPv6 binding
        volumes:
          - /etc/docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
        networks:
          - name: production_network
        network_mode: "bridge"  # Explicitly set bridge mode
        env:
          NODE_ENV: "production"
          BACKEND_URL: "http://projectxb:3000"
        healthcheck:
          test: ["CMD", "curl", "-f", "http://localhost/"]
          interval: 30s
          timeout: 3s
          retries: 3
          start_period: 10s
        log_driver: json-file
        log_options:
          max-size: 10m
          max-file: "3"
    
    - name: Wait for the containers to be up
      wait_for:
        host: localhost
        port: "{{ backend_port }}"
        delay: 5
        timeout: 60
    
    - name: Log where and if the containers are up and running
      debug:
        msg: "Containers est√£o rodando em: Frontend: http://[{{ lookup('env', 'IPV6_ADDRESS') }}]:{{ frontend_port }} Backend: http://[{{ lookup('env', 'IPV6_ADDRESS') }}]:{{ backend_port }}"

    - name: Verify container accessibility
      uri:
        url: "http://localhost:4200"
        method: GET
        return_content: yes
      register: health_check
      ignore_errors: true

    - name: Display container status
      debug:
        msg: "Container health check: {{ 'SUCCESS' if health_check.status == 200 else 'FAILED' }}"
