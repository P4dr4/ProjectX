---
- name: Docker Container Deployment
  hosts: raspberry
  become: true
  become_method: sudo
  
  vars:
    backend_image: pedroaccarini/projectxb:latest
    frontend_image: pedroaccarini/projectxf:latest
    backend_port: 3000
    frontend_port: 4200
    raspberry_ip: "{{ ansible_host }}"

  tasks:
    - name: Install Docker requirements
      apt:
        name:
          - docker.io
          - python3-docker
        state: present
        update_cache: yes

    - name: Ensure Docker service is running
      service:
        name: docker
        state: started
        enabled: yes

    - name: Create Docker network
      docker_network:
        name: production_network
        state: present

    - name: Pull backend image
      docker_image:
        name: "{{ backend_image }}"
        source: pull
        force_source: yes

    - name: Pull frontend image
      docker_image:
        name: "{{ frontend_image }}"
        source: pull
        force_source: yes

    - name: Deploy backend container on local server Ubuntu
      docker_container:
        name: projectxb
        image: "{{ backend_image }}"
        state: started
        restart_policy: always
        ports:
          - "{{ backend_port }}:{{ backend_port }}"
        networks:
          - name: production_network
        env:
          NODE_ENV: "production"
        log_driver: json-file
        log_options:
          max-size: 10m
          max-file: "3"

    - name: Deploy frontend container on local server Ubuntu
      docker_container:
        name: projectxf
        image: "{{ frontend_image }}"
        state: started
        restart_policy: always
        ports:
          - "[::]:4200:80"
        networks:
          - name: production_network
        env:
          NODE_ENV: "production"
          BACKEND_URL: "http://projectxb:3000"
        healthcheck:
          test: ["CMD", "curl", "-f", "http://localhost/"]
          interval: 30s
          timeout: 3s
          retries: 3
          start_period: 10s
        log_driver: json-file
        log_options:
          max-size: 10m
          max-file: "3"
    
    - name: Wait for the containers to be up
      wait_for:
        host: localhost
        port: "{{ backend_port }}"
        delay: 5
        timeout: 60
    
    - name: Log where and if the containers are up and running
      debug:
        msg: "Containers est√£o rodando em: Frontend: http://[2804:14d:8084:acca::1ab2]:{{ frontend_port }} Backend: http://[2804:14d:8084:acca::1ab2]:{{ backend_port }}"
